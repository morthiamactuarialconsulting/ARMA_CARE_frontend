import { Component, OnInit, Inject, PLATFORM_ID } from '@angular/core';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import { Router, ActivatedRoute, RouterModule } from '@angular/router';
import { CommonModule, isPlatformBrowser } from '@angular/common';
import { AuthService } from '../../../shared/services/auth.service';
import { finalize, catchError } from 'rxjs/operators';
import { of } from 'rxjs';

@Component({
  selector: 'app-login',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule, RouterModule],
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.scss']
})
export class LoginComponent implements OnInit {
  loginForm!: FormGroup;
  returnUrl: string = '/';
  isSubmitting = false;
  error = '';
  submitted = false;
  private isBrowser: boolean;

  constructor(
    private formBuilder: FormBuilder,
    private route: ActivatedRoute,
    private router: Router,
    private authService: AuthService,
    @Inject(PLATFORM_ID) private platformId: Object
  ) { 
    this.isBrowser = isPlatformBrowser(this.platformId);
  }

  ngOnInit(): void {
    console.log('[LOGIN] Initialisation du composant de connexion');
    
    // Rediriger vers le tableau de bord si déjà connecté
    if (this.authService.isLoggedIn()) {
      console.log('[LOGIN] Utilisateur déjà connecté, vérification du token:', this.authService.getToken());
      this.navigateBasedOnRole();
      return;
    } else {
      console.log('[LOGIN] Aucun utilisateur connecté détecté');
    }

    this.loginForm = this.formBuilder.group({
      username: ['', [Validators.required, Validators.email]],  // L'email est utilisé comme identifiant
      password: ['', Validators.required]
    });

    // Récupérer l'URL de retour des paramètres de route ou utiliser la page d'accueil
    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';
    console.log('[LOGIN] URL de retour après connexion:', this.returnUrl);
  }

  /**
   * Méthode pour naviguer selon le rôle de l'utilisateur après connexion
   * Priorité donnée à la redirection vers le dashboard professionnel
   */
  private navigateBasedOnRole(): void {
    // Forcer le rafraîchissement des données utilisateur pour éviter les problèmes de synchronisation
    const currentUser = this.authService.refreshUserData() || this.authService.getCurrentUser();
    console.log('[LOGIN] NavigateBasedOnRole - Utilisateur actuel rafraîchi:', currentUser);
    
    if (!currentUser) {
      console.error('[LOGIN] ERREUR SÉCURITÉ: Aucun utilisateur trouvé dans la session');
      console.log('[LOGIN] Redirection vers la page de connexion');
      this.router.navigate(['/auth/login']);
      return;
    }
    
    console.log('[LOGIN] Rôles disponibles:', currentUser.roles);
    
    // Vérification des rôles et redirection appropriée
    if (this.authService.hasRole('PROFESSIONAL')) {
      this.router.navigateByUrl('/professional/dashboard', { replaceUrl: true })
        .then(success => {
          console.log('[LOGIN] Navigation réussie vers dashboard professionnel:', success);
          if (!success && this.isBrowser) {
            window.location.href = '/professional/dashboard';
          }
        })
        .catch(err => {
          console.error('[LOGIN] Erreur de navigation vers dashboard professionnel:', err);
          if (this.isBrowser) {
            window.location.href = '/professional/dashboard';
          }
        });
    } else if (this.authService.hasRole('ADMIN')) {
      this.router.navigateByUrl('/admin/dashboard', { replaceUrl: true })
        .then(success => {
          console.log('[LOGIN] Navigation réussie vers dashboard admin:', success);
          if (!success && this.isBrowser) {
            window.location.href = '/admin/dashboard';
          }
        })
        .catch(err => {
          console.error('[LOGIN] Erreur de navigation vers dashboard admin:', err);
          if (this.isBrowser) {
            window.location.href = '/admin/dashboard';
          }
        });
    } else {
      this.router.navigateByUrl('/', { replaceUrl: true });
    }
  }

  /**
   * Gestionnaire de soumission du formulaire
   */
  onSubmit(): void {
    this.submitted = true;
    console.log('[LOGIN] Soumission du formulaire');
    
    // Vérification de la validité du formulaire
    if (this.loginForm.invalid) {
      console.warn('[LOGIN] Formulaire invalide, interruption');
      return;
    }
    
    // Récupération et traitement des valeurs
    const username = this.loginForm.get('username')?.value.trim();
    const password = this.loginForm.get('password')?.value;
    
    console.log('[LOGIN] Tentative de connexion:', username);
    
    this.isSubmitting = true;
    this.error = '';
    
    // Appel au service d'authentification avec gestion améliorée des erreurs
    this.authService.login({ username, password })
      .pipe(
        catchError(err => {
          console.error('[LOGIN] Erreur de connexion:', err);
          this.error = err.error?.message || 'Identifiants incorrects';
          this.isSubmitting = false;
          return of(null);
        }),
        finalize(() => {
          console.log('[LOGIN] Finalisation de la requête de connexion');
          this.isSubmitting = false;
        })
      )
      .subscribe(response => {
        // Si null (erreur déjà traitée dans catchError)
        if (!response) return;
        
        console.log('[LOGIN] Connexion réussie, traitement de la réponse');
        
        // Vérification des informations utilisateur après connexion
        const currentUser = this.authService.getCurrentUser();
        if (!currentUser) {
          this.error = 'Session utilisateur non valide';
          return;
        }
        
        // Normalisation des rôles si nécessaire
        if (currentUser.roles && !Array.isArray(currentUser.roles)) {
          try {
            if (typeof currentUser.roles === 'string' && currentUser.roles.includes('[')) {
              // Si les rôles sont en format JSON string
              currentUser.roles = JSON.parse(currentUser.roles);
            } else if (typeof currentUser.roles === 'string') {
              // Si c'est une simple chaîne de caractères
              currentUser.roles = currentUser.roles.split(',').map((r: string) => r.trim());
            }
            // Mise à jour des informations utilisateur
            this.authService.refreshUserData();
          } catch (e) {
            console.error('[LOGIN] Erreur lors de la normalisation des rôles:', e);
          }
        }
        
        // Navigation basée sur les rôles
        this.navigateBasedOnRole();
      });
  }
}
